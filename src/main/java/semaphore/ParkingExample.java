package semaphore;

import java.util.concurrent.Semaphore;

public class ParkingExample {

        /**
         * Основные методы Semaphore:<br>
         * acquire(): Захватывает разрешение у семафора. Если разрешений нет, поток блокируется, пока они не появятся. <br>
         * release(): Освобождает разрешение, увеличивая счетчик семафора.
         * availablePermits(): Возвращает количество доступных разрешений.<br>
         * <br>
         * Как это работает:<br>
         * Создание семафора:Мы создаем семафор с 5 разрешениями, что означает, что одновременно на парковке может находиться не более 5 машин.<br>
         * Захват разрешения: Когда машина (поток) подъезжает к парковке, она вызывает метод acquire(). Если есть свободные места (разрешения), машина занимает одно из них. Если мест нет, поток блокируется, пока место не освободится.<br>
         * Освобождение разрешения: Когда машина уезжает, она вызывает метод release(), освобождая место на парковке.<br>
         * Имитация стоянки: Метод Thread.sleep(2000) имитирует время, которое машина проводит на парковке.<br>
         */
    public static void main(String[] args) throws InterruptedException {
        // Создаем семафор с 5 разрешениями (5 мест на парковке)
        Semaphore parking = new Semaphore(5);

        // Создаем 10 машин (потоков)
        for (int i = 1; i <= 10; i++) {
            new Thread(new Car(i, parking)).start();
        }
    }
}
